<?php

/**
 * The Lamplighter Library class is responsible for sending and receiving
 * requests to/from the Lamplighter app.
 * @author Lamplighter
 */
class Lamplighter_library
{

	/**
	 * The base URL of the Lamplighter app.
	 * @var string
	 */
	public $lamplighter_url = 'https://app.lamplighter.io';


	/**
	 * The ID of the current site as it is known to the Lamplighter app.
	 * @var integer
	 */
	public $lamplighter_site_id = null;


	/**
	 * The ID of the current site that is stored in the EE sites table.
	 * @var integer
	 */
	public $site_id = null;


	/**
	 * This is the site API key that was generated by Lamplighter.
	 * @var string
	 */
	public $api_key = null;


	/**
	 * The reference to the EE object.
	 * @var CI_Controller
	 */
	protected $EE = null;


	/**
	 * The class constructor.
	 */
	public function __construct()
	{
		$this->EE      =& get_instance();
		$this->prefix  = $this->EE->db->dbprefix;
		$this->site_id = $this->EE->config->item('site_id');
		// This method populates $api_key and $lamplighter_site_id if they are set.
		$this->populate_lamplighter_data_members();
	}


	/**
	 * This method splits a site token into its two components and stores them
	 * locally. Then it registers the module's action ID with the Lamplighter app.
	 * @param string $site_token
	 * @return array
	 */
	public function store_token_data($site_token=null)
	{
		$key = explode(':', $site_token);
		$return = null;
		// A full site token--valid or invalid--was supplied.
		if (isset($key[1])) {
			$this->lamplighter_site_id = $key[0];
			$this->api_key = $key[1];
			$this->EE->db->insert('lamplighter_license', array(
				'key' => $this->api_key,
				'lamplighter_site_id' => $this->lamplighter_site_id,
				'site_id' => $this->site_id
			));
			$response = $this->register_action_id();
			// Received a full JSON response from Lamplighter.
			if (isset($response->status)) {
				$return = array('status' => $response->status, 'message' => $response->message);
			// Either broken JSON was returned or Lamplighter didn't respond.
			} else {
				$return = array('status' => 'error', 'message' => 'Error: Unable to process the response from Lamplighter.');
			}
		// A malformed site token was supplied.
		} else {
			$return = array('status' => 'error', 'message' => 'Error: Please enter the complete site token.');
		}

		return $return;
	}


	/**
	 * This method registers the Lamplighter module action ID for handling requests
	 * from the app.
	 * @return array
	 */
	public function register_action_id()
	{
		$action_id = $this->EE->cp->fetch_action_id('Lamplighter', 'api_request');
		$api_url   = '/api/register/' . $this->lamplighter_site_id;
		$data      = array('action_id' => $action_id,'api_key'	=> $this->api_key);
		$response  = json_decode($this->_curl_request($api_url, $data));
		// Return true if the request was successful.
		return $response;
	}


	/**
	 * This method unregisters a site token from the Lamplighter app.
	 * @return mixed
	 */
	public function unregister_action_id()
	{
		$uri = '/api/unregister/' . $this->lamplighter_site_id;
		$data = array('api_key' => $this->api_key);
		$this->purge_token_data();
		$response = json_decode($this->_curl_request($uri, $data));
		return $response;
	}


	/**
	 * This method populates the two class members that hold data that
	 * originated from Lamplighter.
	 * @return self
	 */
	public function populate_lamplighter_data_members()
	{
		if ( $this->EE->db->table_exists('lamplighter_license') ) {
			$query = $this->EE->db->select('lamplighter_site_id, key')
								->from('lamplighter_license')
								->where('site_id', $this->site_id)
								->order_by('id', 'desc')
								->limit(1)->get();
			$license_row = $query->row();
			$this->lamplighter_site_id = isset($license_row->lamplighter_site_id) ? $license_row->lamplighter_site_id : null;
			$this->api_key             = isset($license_row->key) ? $license_row->key : null;
		}
		return $this;
	}


	/**
	 * This method removes the site's lamplighter license record from the DB.
	 */
	public function purge_token_data()
	{
		$this->EE->db->delete('lamplighter_license', array('site_id' => $this->site_id));
	}


	/**
	 * This method directs all API requests made to this add-on to the proper
	 * corresponding class method.
	 * @param string $api
	 */
	public function api_request($api=null)
	{
		// The array of valid Lamplighter add-on endpoints
		$valid_endpoints = array('addons');

		// 1) No endpoint was specified at all
		if (empty($api)) {
			$response = array('status' => 'error', 'message' => 'Invalid API Request');
		// 2) An invalid endpoint was specified
		} else if (!in_array($api, $valid_endpoints)) {
			$response = array('status' => 'error', 'message' => 'Invalid Endpoint');
		// 3) This seems to be a valid request, make a call to the API function.
		} else {
			$api = '_api_'.$api;
			$response = $this->$api();
		}

		return $response;
	}


	/**
	 * Parse the contents of the phpinfo() function and format the data as an array.
	 * @return array
	 */
	protected function _php_info()
	{

        $tables = $this->EE->db->query('SHOW TABLE STATUS')->result_array();

        $dbSize = 0;
        foreach ($tables AS $table) {
            $dbSize += (integer) $table['Data_length'] + (integer) $table['Index_length'];
        }

		ob_start();
		phpinfo(-1);

		$pi = preg_replace(
		array('#^.*<body>(.*)</body>.*$#ms', '#<h2>PHP License</h2>.*$#ms',
		'#<h1>Configuration</h1>#',  "#\r?\n#", "#</(h1|h2|h3|tr)>#", '# +<#',
		"#[ \t]+#", '#&nbsp;#', '#  +#', '# class=".*?"#', '%&#039;%',
		'#<tr>(?:.*?)" src="(?:.*?)=(.*?)" alt="PHP Logo" /></a>'
		.'<h1>PHP Version (.*?)</h1>(?:\n+?)</td></tr>#',
		'#<h1><a href="(?:.*?)\?=(.*?)">PHP Credits</a></h1>#',
		'#<tr>(?:.*?)" src="(?:.*?)=(.*?)"(?:.*?)Zend Engine (.*?),(?:.*?)</tr>#',
		"# +#", '#<tr>#', '#</tr>#'),
		array('$1', '', '', '', '</$1>' . "\n", '<', ' ', ' ', ' ', '', ' ',
		'<h2>PHP Configuration</h2>'."\n".'<tr><td>PHP Version</td><td>$2</td></tr>'.
		"\n".'<tr><td>PHP Egg</td><td>$1</td></tr>',
		'<tr><td>PHP Credits Egg</td><td>$1</td></tr>',
		'<tr><td>Zend Engine</td><td>$2</td></tr>' . "\n" .
		'<tr><td>Zend Egg</td><td>$1</td></tr>', ' ', '%S%', '%E%'),
		ob_get_clean());

		$sections = explode('<h2>', strip_tags($pi, '<h2><th><td>'));
		unset($sections[0]);

		$pi = array();
		foreach($sections as $section) {
			$n = substr($section, 0, strpos($section, '</h2>'));
			preg_match_all(
			'#%S%(?:<td>(.*?)</td>)?(?:<td>(.*?)</td>)?(?:<td>(.*?)</td>)?%E%#',
			 $section, $askapache, PREG_SET_ORDER);
			foreach($askapache as $m) {
					if (!isset($m[2]))
						continue;
			   	$pi[$n][$m[1]]=(!isset($m[3])||$m[2]==$m[3])?$m[2]:array_slice($m,2);
			}
		}
		$mysql_info = $this->EE->db->query('SELECT VERSION() AS version');

		$return = array();

		if (isset($pi['mysql'])) {
			$return['mysql'] = $pi['mysql'];
		} else if (isset($pi['mysqli'])) {
			$return['mysql'] = $pi['mysqli'];
		} else {
			$return['mysql'] = '';
		}

		$return['php'] 				= isset($pi['PHP Configuration']) ? $pi['PHP Configuration'] : '';
		$return['core'] 			= isset($pi['Core']) ? $pi['Core'] : '';
		$return['apache'] 			= isset($pi['apache2handler']) ? $pi['apache2handler'] : '';
		$return['server'] 			= isset($_SERVER["SERVER_SOFTWARE"]) ? $_SERVER["SERVER_SOFTWARE"] : '';
		$return['os_name'] 			= function_exists('php_uname') ? php_uname('s') : '';
		$return['os_version'] 			= function_exists('php_uname') ? php_uname('r') : '';
		$return['getrusage'] 		= function_exists('getrusage') ? getrusage() : '';
		$return['temp_dir'] = function_exists('sys_get_temp_dir') ? sys_get_temp_dir() : '';
		$return['system_load'] 		= function_exists('sys_getloadavg') ? sys_getloadavg() : array();
		$return['mysql_version']	= $mysql_info->row('version');
		$return['apache_version'] 	= function_exists('apache_get_version') ? apache_get_version() : '';
		$return['php_version'] 		= phpversion();
        $return['db_size']          = $dbSize;
		return json_encode($return);

	}


	/**
	 * Create an array of data for all the installed add-ons on the site and
	 * POST it to the Lamplighter app.
	 * @return array
	 */
	protected function _api_addons()
	{
		$this->EE->load->add_package_path( PATH_THIRD.'lamplighter/' );
		$this->EE->load->library('devotee_library');
		$addons = json_encode($this->EE->devotee_library->get_addons(FALSE, FALSE, TRUE));
		// Establish the POST parameters.
		$options = array(
			'version' => APP_VER,
			'addons' => $addons,
			'phpinfo' => $this->_php_info(),
			'rand' => rand()
		);
		// POST the add-on data to the Lamplighter app.
		$curl = $this->_curl_request('/api/send/'.$this->lamplighter_site_id, $options);
		$return = json_decode($curl);
		$return_status = isset($return->status) ? $return->status : null;
		// The add-on data POSTed to the app successfully.
		if ($return_status == 'success') {
			$response = array('status' => 'success', 'message' => $return->message);
		// The add-on data POSTED to the app but the app returned an error of its own.
		} elseif (!empty($return_status)) {
			$response = array('status' => $return->status, 'message' => $return->message);
		// There was no response at all from the app.
		} else {
			$response = array('status' => 'error', 'message' => 'There was no response from the Lamplighter application.');
		}

		return $response;
	}


	/**
	 * This method returns the full Lamplighter site token for this site.
	 * @return string
	 */
	public function getSiteToken()
	{
		return $this->api_key ? $this->lamplighter_site_id.':'.$this->api_key : null;
	}


	/**
	 * POST a cURL request w/ (array) $data as POSTed fields.
	 * @param string $uri
	 * @param mixed $data
	 * @param integer $file
	 * @return mixed
	 */
	public function _curl_request($uri, $data, $file = 0)
	{
		$data['api_key'] = $this->api_key;
		$ch = curl_init();
		curl_setopt($ch, CURLOPT_URL, $this->lamplighter_url.$uri);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
		curl_setopt($ch, CURLOPT_SSL_VERIFYHOST,  2);
		curl_setopt($ch, CURLOPT_POST, !empty($data));
		if ($file) {
			curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
		} else {
			curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data) );
		}
		$response = curl_exec($ch);
		return $response;
	}

	// -------------------------------------------------------------------------------

	/**
	 * This method exists to check if the current EE installation is version 3.0.0 or
	 * above.
	 * @return boolean
	 */
	public function ee3()
	{
		return (defined('APP_VER') && version_compare(APP_VER, '3.0.0', '>='));
	}

}
